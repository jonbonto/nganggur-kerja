// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // You will use this environment variable for your DB URL
}

generator client {
  provider = "prisma-client-js"
}

// Define the provider schema for managing users and related data
model User {
  id             Int        @id @default(autoincrement())
  email          String     @unique
  name           String?
  emailVerified  DateTime?  // To store email verification date
  hashedPassword String?
  role           String   @default("user")  // Default to "user"
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  // Other fields as necessary
  passwordResets PasswordReset[]
  // Jobs posted by the user (if they're an employer)
  postedJobs    Job[]
  // Job applications made by the user
  applications  JobApplication[]

   @@map("users") // Custom table name as plural
}

model VerificationToken {
  identifier String
  token      String @unique
  expires    DateTime

   @@map("verification_tokens") // Custom table name as plural
}

model PasswordReset {
  id        Int       @id @default(autoincrement())
  email     String
  token     String    @unique
  expiresAt DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user      User      @relation(fields: [email], references: [email])
  @@map("password_reset") // Custom table name as plural
}

model Job {
  id          Int      @id @default(autoincrement())
  title       String
  company     String
  category    String
  description String
  salary      String?
  location    String
  requirements String[]
  benefits    String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relation to JobApplication
  applications JobApplication[]

  // User who posted the job
  postedBy    User     @relation(fields: [postedById], references: [id])
  postedById  Int

  @@map("jobs")
}

model JobApplication {
  id             Int      @id @default(autoincrement())
  userId         Int      // Foreign key to user who is applying
  jobId          Int      // Foreign key to job being applied to
  coverLetter    String?
  resumeUrl      String?
  status         String   // status could be "pending", "accepted", "rejected"
  appliedAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user           User     @relation(fields: [userId], references: [id])
  job            Job      @relation(fields: [jobId], references: [id])

  @@map("job_applications")
  @@unique([jobId, userId])  // Composite unique constraint
}